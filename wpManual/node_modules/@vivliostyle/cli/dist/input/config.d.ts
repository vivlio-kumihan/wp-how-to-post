import { InputFormat, ManuscriptMediaType } from '../input/input-types.js';
import { OutputFormat } from '../output/output-types.js';
import type { BrowserType, ThemeObject, VivliostyleConfigEntry } from '../schema/vivliostyleConfig.schema.js';
import { PageSize } from '../server.js';
export type ParsedTheme = UriTheme | FileTheme | PackageTheme;
export interface UriTheme {
    type: 'uri';
    name: string;
    location: string;
}
export interface FileTheme {
    type: 'file';
    name: string;
    source: string;
    location: string;
}
export interface PackageTheme {
    type: 'package';
    name: string;
    specifier: string;
    location: string;
    importPath?: string | string[];
}
export interface ManuscriptEntry {
    type: ManuscriptMediaType;
    title?: string;
    themes: ParsedTheme[];
    source: string;
    target: string;
    rel?: string | string[];
}
export interface ContentsEntry {
    rel: 'contents';
    title?: string;
    themes: ParsedTheme[];
    target: string;
    pageBreakBefore?: 'left' | 'right' | 'recto' | 'verso';
    pageCounterReset?: number;
}
export interface CoverEntry {
    rel: 'cover';
    title?: string;
    themes: ParsedTheme[];
    target: string;
    coverImageSrc: string;
    coverImageAlt: string;
    pageBreakBefore?: 'left' | 'right' | 'recto' | 'verso';
}
export type ParsedEntry = ManuscriptEntry | ContentsEntry | CoverEntry;
export interface CliFlags {
    input?: string;
    configPath?: string;
    targets?: Pick<OutputFormat, 'path' | 'format'>[];
    theme?: string;
    size?: string;
    cropMarks?: boolean;
    bleed?: string;
    cropOffset?: string;
    css?: string;
    style?: string;
    userStyle?: string;
    singleDoc?: boolean;
    quick?: boolean;
    pressReady?: boolean;
    title?: string;
    author?: string;
    language?: string;
    /** @deprecated */ verbose?: boolean;
    timeout?: number;
    renderMode?: 'local' | 'docker';
    preflight?: 'press-ready' | 'press-ready-local';
    preflightOption?: string[];
    sandbox?: boolean;
    executableBrowser?: string;
    image?: string;
    http?: boolean;
    viewer?: string;
    viewerParam?: string;
    browser?: 'chromium' | 'firefox' | 'webkit';
    readingProgression?: 'ltr' | 'rtl';
    logLevel?: 'silent' | 'info' | 'verbose' | 'debug';
    /** @deprecated */ executableChromium?: string;
}
export interface WebPublicationManifestConfig {
    manifestPath: string;
    needToGenerateManifest?: boolean;
}
export interface EpubManifestConfig {
    epubOpfPath: string;
}
export interface WebbookEntryConfig {
    webbookEntryUrl: string;
}
export type ManifestConfig = XOR<[
    WebPublicationManifestConfig,
    WebbookEntryConfig,
    EpubManifestConfig
]>;
export type MergedConfig = {
    entryContextDir: string;
    workspaceDir: string;
    themesDir: string;
    entries: ParsedEntry[];
    input: InputFormat;
    outputs: OutputFormat[];
    themeIndexes: Set<ParsedTheme>;
    rootThemes: ParsedTheme[];
    copyAsset: {
        includes: string[];
        excludes: string[];
        fileExtensions: string[];
    };
    exportAliases: {
        source: string;
        target: string;
    }[];
    size: PageSize | undefined;
    cropMarks: boolean;
    bleed: string | undefined;
    cropOffset: string | undefined;
    css: string | undefined;
    customStyle: string | undefined;
    customUserStyle: string | undefined;
    singleDoc: boolean;
    quick: boolean;
    title: string | undefined;
    author: string | undefined;
    language: string | undefined;
    readingProgression: 'ltr' | 'rtl' | undefined;
    vfmOptions: {
        hardLineBreaks: boolean;
        disableFormatHtml: boolean;
    };
    cover: {
        src: string;
        name: string;
        htmlPath: string | undefined;
    } | undefined;
    timeout: number;
    sandbox: boolean;
    executableBrowser: string;
    browserType: BrowserType;
    image: string;
    httpServer: boolean;
    viewer: string | undefined;
    viewerParam: string | undefined;
    logLevel: 'silent' | 'info' | 'verbose' | 'debug';
} & ManifestConfig;
export declare function validateTimeoutFlag(val: string): number;
export declare function contextResolve(context: string, loc: string | undefined): string | undefined;
export declare function parseTheme({ theme, context, workspaceDir, themesDir, }: {
    theme: string | ThemeObject;
    context: string;
    workspaceDir: string;
    themesDir: string;
}): ParsedTheme;
export declare function collectVivliostyleConfig<T extends CliFlags>(cliFlags: T): Promise<{
    cliFlags: T;
} & ({
    vivliostyleConfig: VivliostyleConfigEntry[];
    vivliostyleConfigPath: string;
} | {
    vivliostyleConfig?: undefined;
    vivliostyleConfigPath?: undefined;
})>;
export declare function mergeConfig<T extends CliFlags>(cliFlags: T, config: VivliostyleConfigEntry | undefined, context: string): Promise<MergedConfig>;
//# sourceMappingURL=config.d.ts.map