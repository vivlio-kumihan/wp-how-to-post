/// <reference types="node" resolution-mode="require"/>
import jsdom, { ResourceLoader as BaseResourceLoader, JSDOM } from '@vivliostyle/jsdom';
import { ManuscriptEntry } from '../input/config.js';
import type { PublicationManifest } from '../schema/publication.schema.js';
export declare class ResourceLoader extends BaseResourceLoader {
    fetcherMap: Map<string, jsdom.AbortablePromise<Buffer>>;
    fetch(url: string, options?: jsdom.FetchOptions): jsdom.AbortablePromise<Buffer> | null;
}
export declare function getJsdomFromUrlOrFile(src: string, resourceLoader?: ResourceLoader): Promise<{
    dom: JSDOM;
}>;
declare const getTocHtmlStyle: ({ pageBreakBefore, pageCounterReset, }: {
    pageBreakBefore?: "left" | "right" | "recto" | "verso" | undefined;
    pageCounterReset?: number | undefined;
}) => string | null;
export declare function generateTocHtml({ entries, manifestPath, distDir, language, title, tocTitle, stylesheets, styleOptions, }: {
    entries: Pick<ManuscriptEntry, 'target' | 'title'>[];
    manifestPath: string;
    distDir: string;
    language?: string;
    title?: string;
    tocTitle: string;
    stylesheets?: string[];
    styleOptions?: Parameters<typeof getTocHtmlStyle>[0];
}): string;
declare const getCoverHtmlStyle: ({ pageBreakBefore, }: {
    pageBreakBefore?: "left" | "right" | "recto" | "verso" | undefined;
}) => string;
export declare function generateCoverHtml({ imageSrc, imageAlt, language, title, stylesheets, styleOptions, }: {
    imageSrc: string;
    imageAlt: string;
    language?: string;
    title?: string;
    stylesheets?: string[];
    styleOptions?: Parameters<typeof getCoverHtmlStyle>[0];
}): string;
export declare function processManuscriptHtml(filepath: string, { title, style, contentType, language, }: {
    title?: string;
    style?: string[];
    contentType?: 'text/html' | 'application/xhtml+xml';
    language?: string | null;
}): string;
export declare function isTocHtml(filepath: string): boolean;
export declare function isCovertHtml(filepath: string): boolean;
export declare function fetchLinkedPublicationManifest({ dom, resourceLoader, baseUrl, }: {
    dom: JSDOM;
    resourceLoader: ResourceLoader;
    baseUrl: string;
}): Promise<PublicationManifest | null>;
export type TocResourceTreeItem = {
    element: HTMLElement;
    label: HTMLElement;
    children?: TocResourceTreeItem[];
};
export type TocResourceTreeRoot = {
    element: HTMLElement;
    heading?: HTMLElement;
    children: TocResourceTreeItem[];
};
export declare function parseTocDocument(dom: JSDOM): TocResourceTreeRoot | null;
export type PageListResourceTreeItem = {
    element: HTMLElement;
};
export type PageListResourceTreeRoot = {
    element: HTMLElement;
    heading?: HTMLElement;
    children: PageListResourceTreeItem[];
};
export declare function parsePageListDocument(dom: JSDOM): PageListResourceTreeRoot | null;
export {};
//# sourceMappingURL=html.d.ts.map