import { MergedConfig, WebPublicationManifestConfig } from '../input/config.js';
import type { PublicationLinks, PublicationManifest, URL as PublicationURL } from '../schema/publication.schema.js';
import type { ArticleEntryObject } from '../schema/vivliostyleConfig.schema.js';
export declare function cleanupWorkspace({ entryContextDir, workspaceDir, themesDir, }: MergedConfig): Promise<void>;
export declare function prepareThemeDirectory({ themesDir, themeIndexes, }: MergedConfig): Promise<void>;
export declare function generateManifest(outputPath: string, entryContextDir: string, options: {
    title?: string;
    author?: string;
    language?: string;
    readingProgression?: 'ltr' | 'rtl';
    modified: string;
    entries: ArticleEntryObject[];
    cover?: {
        url: string;
        name: string;
    };
    links?: (PublicationURL | PublicationLinks)[];
    resources?: (PublicationURL | PublicationLinks)[];
}): PublicationManifest;
export declare function compile({ entryContextDir, workspaceDir, manifestPath, needToGenerateManifest, title, author, entries, language, readingProgression, cover, vfmOptions, }: MergedConfig & WebPublicationManifestConfig): Promise<void>;
export declare function globAssetFiles({ copyAsset: { fileExtensions, includes, excludes }, cwd, ignore, }: Pick<MergedConfig, 'copyAsset'> & {
    cwd: string;
    ignore?: string[];
}): Promise<Set<string>>;
export declare function copyAssets({ entryContextDir, workspaceDir, copyAsset, outputs, }: MergedConfig): Promise<void>;
export declare function checkOverwriteViolation({ entryContextDir, workspaceDir }: MergedConfig, target: string, fileInformation: string): void;
//# sourceMappingURL=compile.d.ts.map