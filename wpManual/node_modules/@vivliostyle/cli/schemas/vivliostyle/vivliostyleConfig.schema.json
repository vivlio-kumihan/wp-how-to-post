{
  "definitions": {
    "entry": {
      "type": "string",
      "minLength": 1
    },
    "articleEntryObject": {
      "type": "object",
      "properties": {
        "path": { "type": "string" },
        "title": { "type": "string" },
        "theme": { "$ref": "#/definitions/themeSpecifier" },
        "encodingFormat": { "type": "string" },
        "rel": {
          "type": ["string", "array"],
          "items": {
            "type": "string"
          }
        }
      },
      "required": ["path"],
      "additionalProperties": false
    },
    "browserType": {
      "type": "string",
      "enum": ["chromium", "firefox", "webkit"]
    },
    "contentsEntryObject": {
      "type": "object",
      "properties": {
        "rel": {
          "type": "string",
          "const": "contents"
        },
        "title": { "type": "string" },
        "theme": { "$ref": "#/definitions/themeSpecifier" },
        "pageBreakBefore": {
          "description": "Specify the page break position before this document. It is useful when you want to specify which side a first page of the document should be placed on a two-page spread.",
          "type": "string",
          "enum": ["left", "right", "recto", "verso"]
        },
        "pageCounterReset": {
          "description": "Reset the starting page number of this document by the specified integer. It is useful when you want to control page numbers when including a cover page.",
          "type": "integer",
          "minimum": 1
        }
      },
      "required": ["rel"],
      "additionalProperties": false
    },
    "coverEntryObject": {
      "type": "object",
      "properties": {
        "rel": {
          "type": "string",
          "const": "cover"
        },
        "path": { "type": "string" },
        "title": { "type": "string" },
        "theme": { "$ref": "#/definitions/themeSpecifier" },
        "imageSrc": { "type": "string" },
        "imageAlt": { "type": "string" },
        "pageBreakBefore": {
          "description": "Specify the page break position before this document. It is useful when you want to specify which side a first page of the document should be placed on a two-page spread.",
          "type": "string",
          "enum": ["left", "right", "recto", "verso"]
        }
      },
      "required": ["rel"],
      "additionalProperties": false
    },
    "entryObject": {
      "anyOf": [
        { "$ref": "#/definitions/contentsEntryObject" },
        { "$ref": "#/definitions/coverEntryObject" },
        { "$ref": "#/definitions/articleEntryObject" }
      ]
    },
    "output": {
      "type": "string",
      "minLength": 1
    },
    "outputObject": {
      "type": "object",
      "properties": {
        "path": {
          "description": "Specify output file name or directory [<title>.pdf].",
          "type": "string"
        },
        "format": {
          "description": "Specify output format.",
          "type": "string"
        },
        "renderMode": {
          "description": "if docker is set, Vivliostyle try to render PDF on Docker container [local].",
          "type": "string",
          "enum": ["local", "docker"]
        },
        "preflight": {
          "description": "Apply the process to generate PDF for printing.",
          "type": "string",
          "enum": ["press-ready", "press-ready-local"]
        },
        "preflightOption": {
          "description": "Options for preflight process (ex: gray-scale, enforce-outline). Please refer the document of press-ready for further information. https://github.com/vibranthq/press-ready",
          "type": "array",
          "items": { "type": "string" }
        }
      },
      "required": ["path"],
      "additionalProperties": false
    },
    "theme": {
      "type": "string",
      "minLength": 1
    },
    "themeObject": {
      "type": "object",
      "properties": {
        "specifier": {
          "description": "Sepcifier name of importing theme package or a path of CSS file. \n- A npm-style package argument is allowed (ex: @vivliostyle/theme-academic@1 ./local-pkg)\n- A URL or a local path of CSS is allowed (ex: ./style.css, https://example.com/style.css)",
          "type": "string",
          "minLength": 1
        },
        "import": {
          "description": "Importing CSS path(s) of the package. Specify this if you want to import other than the default file.",
          "type": ["string", "array"],
          "items": {
            "type": "string"
          }
        }
      },
      "required": ["specifier"],
      "additionalProperties": false
    },
    "themeSpecifier": {
      "oneOf": [
        { "$ref": "#/definitions/theme" },
        { "$ref": "#/definitions/themeObject" },
        {
          "type": "array",
          "items": {
            "oneOf": [
              { "$ref": "#/definitions/theme" },
              { "$ref": "#/definitions/themeObject" }
            ]
          }
        }
      ]
    },
    "vfmReplaceRule": {
      "type": "object",
      "properties": {
        "test": {
          "type": "object",
          "tsType": "RegExp"
        },
        "match": {
          "instanceOf": "Function",
          "tsType": "(result: RegExpMatchArray, h: any) => Object | string"
        }
      },
      "required": ["test", "match"],
      "additionalProperties": false
    },
    "vivliostyleConfigEntry": {
      "type": "object",
      "properties": {
        "title": {
          "type": "string",
          "description": "Title",
          "minLength": 1
        },
        "author": {
          "type": "string",
          "description": "Author",
          "minLength": 1
        },
        "theme": {
          "$ref": "#/definitions/themeSpecifier",
          "description": "Theme package path(s) or URL(s) of css file."
        },
        "entry": {
          "description": "Entry file(s) of document.",
          "oneOf": [
            { "$ref": "#/definitions/entry" },
            { "$ref": "#/definitions/articleEntryObject" },
            {
              "type": "array",
              "items": {
                "oneOf": [
                  { "$ref": "#/definitions/entry" },
                  { "$ref": "#/definitions/entryObject" }
                ]
              },
              "uniqueItems": true
            }
          ]
        },
        "entryContext": {
          "description": "Directory of referencing entry file(s).",
          "type": "string",
          "minLength": 1
        },
        "output": {
          "description": "Options about outputs.",
          "oneOf": [
            {
              "type": "array",
              "items": {
                "oneOf": [
                  { "$ref": "#/definitions/output" },
                  { "$ref": "#/definitions/outputObject" }
                ]
              }
            },
            { "$ref": "#/definitions/output" },
            { "$ref": "#/definitions/outputObject" }
          ]
        },
        "workspaceDir": {
          "type": "string",
          "description": "",
          "minLength": 1
        },
        "includeAssets": {
          "deprecated": true,
          "description": "@deprecated Use 'copyAsset.includes' instead",
          "oneOf": [
            {
              "type": "array",
              "items": { "$ref": "#/definitions/entry" }
            },
            { "$ref": "#/definitions/entry" }
          ]
        },
        "copyAsset": {
          "description": "Options about asset files to be copied when exporting output.",
          "type": "object",
          "properties": {
            "includes": {
              "description": "Specify directories and files you want to include as asset files. This option supports wildcard characters to make glob patterns.",
              "type": "array",
              "items": {
                "type": "string",
                "minLength": 1
              }
            },
            "excludes": {
              "description": "Specify directories and files you want to exclude from the asset file. This option supports wildcard characters to make glob patterns.",
              "type": "array",
              "items": {
                "type": "string",
                "minLength": 1
              }
            },
            "includeFileExtensions": {
              "description": "Specify extensions of the file you want to include as an asset file. (default: [png, jpg, jpeg, svg, gif, webp, apng, ttf, otf, woff, woff2])",
              "type": "array",
              "items": {
                "type": "string",
                "minLength": 1
              }
            },
            "excludeFileExtensions": {
              "description": "Specify extensions of the file you want to exclude as an asset file. ",
              "type": "array",
              "items": {
                "type": "string",
                "minLength": 1
              }
            }
          }
        },
        "size": {
          "description": "Output pdf size [Letter]. preset: A5, A4, A3, B5, B4, JIS-B5, JIS-B4, letter, legal, ledger. custom(comma separated): 182mm,257mm or 8.5in,11in.",
          "type": "string",
          "minLength": 1
        },
        "pressReady": {
          "description": "Make generated PDF compatible with press ready PDF/X-1a [false]. This option is equivalent with \"preflight\": \"press-ready\"",
          "type": "boolean"
        },
        "language": {
          "description": "Language",
          "type": "string",
          "minLength": 1
        },
        "readingProgression": {
          "type": "string",
          "enum": ["ltr", "rtl"],
          "default": "ltr"
        },
        "toc": {
          "description": "Specify whether to generate a table of contents (ToC) document. If a string is set, the ToC document will be saved at that location. (default: index.html)",
          "oneOf": [
            { "type": "boolean" },
            {
              "type": "string",
              "minLength": 1
            }
          ]
        },
        "tocTitle": {
          "description": "Specify the title of the generated ToC document.",
          "type": "string",
          "minLength": 1
        },
        "cover": {
          "description": "Options about cover images and cover page documents",
          "oneOf": [
            {
              "type": "string",
              "minLength": 1
            },
            {
              "type": "object",
              "properties": {
                "src": {
                  "description": "Specify the cover image to be used for the cover page.",
                  "type": "string",
                  "minLength": 1
                },
                "name": {
                  "description": "Specify alternative text for the cover image.",
                  "type": "string",
                  "minLength": 1
                },
                "htmlPath": {
                  "description": "Specify the location where the generated cover document will be saved. (default: cover.html) If falsy value is set, the cover document won't be generated.",
                  "oneOf": [
                    {
                      "type": "string",
                      "minLength": 1
                    },
                    { "type": "boolean" }
                  ]
                }
              },
              "required": ["src"]
            }
          ]
        },
        "timeout": {
          "description": "Timeout limit for waiting Vivliostyle process [120000]",
          "type": "number",
          "minimum": 0
        },
        "vfm": {
          "description": "Option for convert Markdown to a stringify (HTML).",
          "type": "object",
          "properties": {
            "style": {
              "description": "Custom stylesheet path/URL.",
              "type": ["string", "array"],
              "items": {
                "type": "string"
              }
            },
            "partial": {
              "description": "Output markdown fragments.",
              "type": "boolean"
            },
            "title": {
              "description": "Document title (ignored in partial mode).",
              "type": "string"
            },
            "language": {
              "description": "Document language (ignored in partial mode).",
              "type": "string"
            },
            "replace": {
              "description": "Replacement handler for HTML string.",
              "type": "array",
              "items": {
                "$ref": "#/definitions/vfmReplaceRule"
              }
            },
            "hardLineBreaks": {
              "description": "Add `<br>` at the position of hard line breaks, without needing spaces.",
              "type": "boolean"
            },
            "disableFormatHtml": {
              "description": "Disable automatic HTML format.",
              "type": "boolean"
            },
            "math": {
              "description": "Enable math syntax.",
              "type": "boolean"
            }
          }
        },
        "image": {
          "description": "Specify a docker image to render.",
          "type": "string",
          "minLength": 1
        },
        "http": {
          "description": "Launch an HTTP server hosting contents instead of file protocol. It is useful that requires CORS such as external web fonts.",
          "type": "boolean"
        },
        "viewer": {
          "description": "Specify a URL of displaying viewer instead of vivliostyle-cli's one. It is useful that using own viewer that has staging features. (ex: https://vivliostyle.vercel.app/)",
          "type": "string",
          "minLength": 1
        },
        "viewerParam": {
          "description": "specify viewer parameters. (ex: \"allowScripts=false&pixelRatio=16\")",
          "type": "string",
          "minLength": 1
        },
        "browser": {
          "description": "EXPERIMENTAL SUPPORT: Specify a browser type to launch Vivliostyle viewer. Currently, Firefox and Webkit support preview command only!",
          "oneOf": [{ "$ref": "#/definitions/browserType" }],
          "default": "chromium"
        }
      },
      "required": ["entry"]
    }
  },
  "oneOf": [
    {
      "$ref": "#/definitions/vivliostyleConfigEntry"
    },
    {
      "type": "array",
      "items": {
        "$ref": "#/definitions/vivliostyleConfigEntry"
      },
      "minItems": 1
    }
  ]
}
